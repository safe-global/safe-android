apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.appdistribution'
apply from: '../buildsystem/coverage_report.gradle'
apply from: '../buildsystem/test_dependencies.gradle'
apply from: '../buildsystem/test_android_dependencies.gradle'

android {
    defaultConfig {
        applicationId "io.gnosis.safe"
        versionCode getInt("APP_VERSION_CODE", 703)
        versionName getKey("APP_VERSION_NAME", "3.8.0")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Infura API key
        buildConfigField javaTypes.STRING, "INFURA_API_KEY", asString(getKey("INFURA_API_KEY", ""))
        // Intercom
        buildConfigField javaTypes.STRING, "INTERCOM_APP_ID", asString(getKey("INTERCOM_APP_ID", ""))
        buildConfigField javaTypes.STRING, "INTERCOM_API_KEY", asString(getKey("INTERCOM_API_KEY", ""))
        // Services
        buildConfigField javaTypes.STRING, "BLOCKCHAIN_NET_URL", asString(getKey("BLOCKCHAIN_NET_URL", "https://goerli.infura.io/v3/"))
        // Blockchain settings
        buildConfigField javaTypes.STRING, "BLOCKCHAIN_NAME", asString(getKey("BLOCKCHAIN_NAME", "Goerli"))
        // Certificates
        buildConfigField javaTypes.MAP, "SSL_PINS", getKey("SSL_PINS",
                "new ${javaTypes.MAP}()" +
                        "{{" +
                        "put(\"*.staging.5afe.dev\", \"sha256/JSMzqOOrtyOT1kmau6zKhgT676hGgczD5VMdRMyJZFA=,sha256/++MBgDH5WGvL9Bcn5Be30cRcL0f5O+NyoXuWtQdX1aI=\");" +
                        "}}")

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        project.archivesBaseName = String.format("safe-%s", defaultConfig.versionCode)

        ext.betaDistributionReleaseNotes = System.getenv("APP_RELEASE_NOTES")

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    signingConfigs {
        debug {
            // We add the debug keystore to repo so that the travis build will always have the same signature
            storeFile file("../debug.keystore")
        }
        release {
            storeFile file(getKey("SIGNING_STORE_FILE", "../gnosis-multisig-upload.jks"))
            storePassword getKey("SIGNING_STORE_PASSWORD")
            keyAlias "gnosis"
            keyPassword getKey("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {

        debug {
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
        }

        unsafe {
            initWith debug
            applicationIdSuffix ".unsafe"
            versionNameSuffix "-unsafe"
            // Certificates
            buildConfigField javaTypes.MAP, "SSL_PINS", getKey("SSL_PINS",
                    "new ${javaTypes.MAP}()" +
                            "{{" +
                            "}}")
            firebaseAppDistribution {
                releaseNotes = getKey("APP_RELEASE_NOTES")
                groups = getKey("FIREBASE_GROUP")
            }
        }

        //Only this profile will have LeakCanary enabled (see dependencies)
        profile {
            initWith debug
            applicationIdSuffix ".profile"
            versionNameSuffix "-profile"
        }

        internal {
            applicationIdSuffix ".internal"
            versionNameSuffix "-internal"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            firebaseAppDistribution {
                releaseNotes = getKey("APP_RELEASE_NOTES")
                groups = getKey("FIREBASE_GROUP")
            }
        }

        release {
            minifyEnabled true
            multiDexEnabled true
            signingConfig signingConfigs.release
            buildConfigField javaTypes.STRING, "BLOCKCHAIN_NAME", asString(getKey("BLOCKCHAIN_NAME", "Mainnet"))
            buildConfigField javaTypes.STRING, "BLOCKCHAIN_NET_URL", asString(getKey("BLOCKCHAIN_NET_URL", "https://mainnet.infura.io/v3/"))
            firebaseAppDistribution {
                releaseNotes = getKey("APP_RELEASE_NOTES")
                groups = getKey("FIREBASE_GROUP")
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }

    packagingOptions {
        exclude 'META-INF/extensions.kotlin_module'
        exclude 'META-INF/LICENSE'
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    buildFeatures {
        viewBinding true
    }
}


dependencies {
    // We specify junit before anything else to make sure that this version is prioritized over the
    // one bundled in the android.jar
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(":data")
    implementation project(":qrscanner")


    implementation "com.github.gnosis.svalinn-kotlin:blockies:$versions.svalinn"

    // Appcompat, views
    implementation "androidx.appcompat:appcompat:$versions.androidx_app_compat"
    implementation "androidx.recyclerview:recyclerview:$versions.androidx_recycler_view"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx_constraint_layout"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.androidx_swipe_refresh"
    implementation "androidx.multidex:multidex:$versions.multidex"
    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.androidx_lifecycle_extensions"
    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.androidx_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.androidx_navigation"
    implementation "androidx.fragment:fragment-ktx:$versions.androidx_fragment"
    implementation "androidx.fragment:fragment:$versions.androidx_fragment"
    // Room
    implementation "androidx.room:room-runtime:$versions.androidx_room"
    implementation "androidx.room:room-ktx:$versions.androidx_room"
    // Google Material
    implementation "com.google.android.material:material:$versions.material"
    // Pagination
    implementation "androidx.paging:paging-runtime:$versions.androidx_paging"

    // String formatting
    implementation "com.squareup.phrase:phrase:$versions.phrase"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // Moshi
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    implementation "com.squareup.moshi:moshi-adapters:$versions.moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation("com.squareup.retrofit2:converter-moshi:$versions.retrofit") {
        exclude group: "com.squareup.moshi", module: "moshi"
    }

    // Logging
    implementation "com.jakewharton.timber:timber:$versions.timber"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    implementation "com.squareup.picasso:picasso:$versions.picasso"


    implementation "androidx.work:work-runtime-ktx:$versions.work"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinx_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinx_coroutines"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.androidx_lifecycle"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$versions.firebase_bom")
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation ('com.google.firebase:firebase-analytics-ktx') {
        exclude module: "play-services-ads-identifier"
    }
    implementation "com.google.firebase:firebase-crashlytics"
    implementation "com.google.firebase:firebase-messaging"

    // Play Core Library (For in-app reviews)
    implementation "com.google.android.play:core:$versions.play_core"
    implementation "com.google.android.play:core-ktx:$versions.play_core_ktx"


    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.desugar_jdk_libs"

    profileImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leak_canary"

    implementation "androidx.biometric:biometric:$versions.androidx_biometrics"

    // Intercom
    implementation "io.intercom.android:intercom-sdk:$versions.intercom"

    implementation "com.airbnb.android:lottie:$versions.lottie"

    // Keystone
    implementation "com.github.KeystoneHQ:keystone-sdk-android:$versions.keystone"
}

task printVersion {
    doLast {
        println android.defaultConfig.versionName
    }
}

ext {
    jacocoCoverageThreshold = 0.2 // 30% - TODO: increase coverage and change back to 0.3
}
